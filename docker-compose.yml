version: '3.5'
networks:
  mon:
    driver: overlay
    attachable: true
    labels:
      - "mon=true"
      - "cadvisor=true"
      - "grafana=true"
      - "node-exporter=true"
      - "blackbox-exporter=true"
      - "prometheus=true"
configs:
  alertmanager_config:
    file: ./configs/alertmanager.yml
  blackbox_config:
    file: ./configs/blackbox.yml
  grafana_datasource:
    file: ./configs/datasources/prometheus.yml
  grafana_dashboard_yml:
    file: ./configs/dashboards/all.yml
  grafana_dashboard:
    file: ./configs/dashboards/monitoring.json
  prometheus_config:
    file: ./configs/prometheus.yml
  prometheus_rules:
    file: ./configs/alert.rules.yml
volumes:
  grafana:
    driver: local
    name: grafana
  alertmanager:
    driver: local
    name: alertmanager
  prometheus:
    driver: local
    name: prometheus
services:
  cadvisor:
    image: google/cadvisor:latest
    command: '-logtostderr -docker_only -prometheus_endpoint=/metrics'
    hostname: '{{.Node.ID}}'
    networks:
      - mon
    volumes:
      - /var/run:/var/run:rw
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /dev/disk/:/dev/disk:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 80M
  prometheus:
    image: prom/prometheus:latest
    command: '--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.retention=30d --storage.tsdb.path=/prometheus --web.enable-admin-api'
    hostname: '{{.Node.ID}}'
    ports:
      - 9090:9090
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/alert.rules.yml
    networks:
      - mon
    volumes:
      - /var/run:/var/run:rw
      - prometheus:/prometheus
    deploy:
      mode: global
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
  node-exporter:
    image: prom/node-exporter
    command: '--path.procfs=/host/proc --path.sysfs=/host/sys --collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)" --collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
    hostname: '{{.Node.ID}}'
    volumes:
      - /var/run:/var/run:rw
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    deploy:
      mode: global
    environment:
      HOST_HOSTNAME: /etc/hostname
    networks:
      - mon
  blackbox-exporter:
    image: prom/blackbox-exporter
    command: '--config.file=/etc/prometheus/blackbox.yml'
    hostname: '{{.Node.ID}}'
    configs:
      - source: blackbox_config
        target: /etc/prometheus/blackbox.yml
    networks:
      - mon
  alertmanager:
    image: prom/alertmanager
    hostname: '{{.Node.ID}}'
    ports:
     - 9093:9093
    configs:
      - source: alertmanager_config
        target: /etc/prometheus/alertmanager.yml
    depends_on:
      - cadvisor
      - prometheus
    environment:
      no_proxy: "prometheus"
    command: '--config.file=/etc/prometheus/alertmanager.yml --storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    networks:
      - mon
    deploy:
      replicas: 1
      placement:
        constraints:
          - 'node.role == manager'
          - 'node.platform.os == linux'
  grafana:
    build:
      context: .
      dockerfile: Dockerfile.grafana
    image: grafana/grafana
    hostname: '{{.Node.ID}}'
    ports:
      - 3000:3000
    configs:
      - source: grafana_datasource
        target: /etc/grafana/provisioning/datasources/prometheus.yml
      - source: grafana_dashboard_yml
        target: /etc/grafana/provisioning/dashboard/all.yml
      - source: grafana_dashboard
        target: /var/lib/grafana/dashboards/monitoring.json
    volumes:
      - grafana:/var/lib/grafana:rw
    depends_on:
      - cadvisor
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      replicas: 1
      placement:
        constraints:
          - 'node.role == manager'
    networks:
      - mon
